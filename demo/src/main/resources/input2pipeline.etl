rule InputJob2PipelineJob
	transform s: Source!Job
	to t: Target!Job{
		t.name = s.name;
		t.runsOn = "ubuntu-latest";
		for(env in s.envVariables){
		    var tEnv = new Target!EnvVariable;
		    tEnv.key = env.key;
		    tEnv.value = env.value;
			t.envVariables.add(tEnv);
		}
		var step1 = new Target!Step;
        step1.name = "Checkout Repository";
        step1.uses = "actions/checkout@v2";
        t.steps.add(step1);
		if(t.name == "build"){

			var step2 = new Target!Step;
			step2.name = "Set up JDK 11";
			step2.uses = "actions/setup-java@v2";
			var distEnv = new Target!EnvVariable;
			distEnv.key = "distribution"; distEnv.value="adopt";
			var javaEnv = new Target!EnvVariable;
			javaEnv.key = "java-version"; javaEnv.value="11";
			step2.envVariables.add(distEnv);step2.envVariables.add(javaEnv);
			t.steps.add(step2);
			
			var step3 = new Target!Step;
			step3.name = "Build with Maven";
			step3.run = "mvn -B clean package";
			t.steps.add(step3);
		}
		
		if(t.name == "test"){
			var step2 = new Target!Step;
			step2.name = "Set up JDK 11";
			step2.uses = "actions/setup-java@v2";
			var distEnv = new Target!EnvVariable;
			distEnv.key = "distribution"; distEnv.value="adopt";
			var javaEnv = new Target!EnvVariable;
			javaEnv.key = "java-version"; javaEnv.value="11";
			step2.envVariables.add(distEnv);step2.envVariables.add(javaEnv);
			t.steps.add(step2);

			var step3 = new Target!Step;
			step3.name = "Test with Maven";
			step3.run = "mvn test";
			t.steps.add(step3);
		}
		
		if(t.name == "deploy"){
                	var step = new Target!Step;
                	step.name = "Login to Docker Hub";
                	step.uses = "docker/login-action@v2";
                	var userName = new Target!EnvVariable;
                    var password = new Target!EnvVariable;
                    userName.key = "username";
                    userName.value = "${{ secrets.DOCKERHUB_USERNAME }}";
                    password.key = "password";
                    password.value = "${{ secrets.DOCKERHUB_TOKEN }}";
                    step.envVariables.add(userName);
                    step.envVariables.add(password);
                	t.steps.add(step1);

                	var step2 = new Target!Step;
                    step2.name = "Build images and Push to Docker Hub";
                    step2.run = "|
\tfor ser in $dir/*; do
\t\tif [ -d \"$ser\" ] && [ -e \"$ser/Dockerfile\" ]; then
\t\t\tser_name=$(basename \"$ser\")
\t\t\tser_name=${ser_name,,}
\t\t\tdocker build -t $ser_name:latest \"$ser\"
\t\t\tdocker tag $ser_name:latest ${{ secrets.DOCKERHUB_USERNAME }}/$ser_name:latest
\t\t\tdocker push ${{ secrets.DOCKERHUB_USERNAME }}/$ser_name:latest
\t\tfi
\tdone
                    ";
                    var dir = new Target!EnvVariable;
                    dir.key = "dir";
                    dir.value="./";
                    step2.envVariables.add(dir);
                    t.steps.add(step2);
                }
	}
	

	
rule Input2Pipeline
	transform s: Source!Input
	to t: Target!MainFile{
		t.name = s.pipelineName;
		for(job in s.jobs){
			var j = job.equivalent();
			t.jobs.add(j);
		}
		var on = new Target!On;
		t.on = on;
		for (event in s.events){
		    var e = new Target!Event;
		    e.name = event.name;
		    for(branch in event.branchs){
		        var b = new Target!Branch;
		        b.name = branch.name;
			    e.branchs.add(b);
		    }
		    t.on.events.add(e);
		}
	}