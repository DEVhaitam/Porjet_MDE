rule InputJob2PipelineJob
	transform s: Source!Job
	to t: Target!Job{
		t.name = s.name;
		t.runsOn = "ubuntu-latest";
		for(env in s.envVariables){
		    var tEnv = new Target!EnvVariable;
		    tEnv.key = env.key;
		    tEnv.value = env.value;
			t.envVariables.add(tEnv);
		}
		
		if(t.name == "build"){
			var step1 = new Target!Step;
			step1.name = "Checkout Repository";
			step1.uses = "actions/checkout@v2";
			t.steps.add(step1);
			var step2 = new Target!Step;
			step2.name = "Set up JDK 11";
			step2.uses = "actions/setup-java@v2";
			var distEnv = new Target!EnvVariable;
			distEnv.key = "distribution"; distEnv.value="adopt";
			var javaEnv = new Target!EnvVariable;
			javaEnv.key = "java-version"; javaEnv.value="11";
			step2.envVariables.add(distEnv);step2.envVariables.add(javaEnv);
			t.steps.add(step2);
			
			var step3 = new Target!Step;
			step3.name = "Build with Maven";
			step3.run = "mvn -B clean package";
			t.steps.add(step3);
		}
		
		if(t.name == "test"){
			var step1 = new Target!Step;
			step1.name = "Checkout Repository";
			step1.uses = "actions/checkout@v2";
			t.steps.add(step1);

			var step2 = new Target!Step;
			step2.name = "Set up JDK 11";
			step2.uses = "actions/setup-java@v2";
			var distEnv = new Target!EnvVariable;
			distEnv.key = "distribution"; distEnv.value="adopt";
			var javaEnv = new Target!EnvVariable;
			javaEnv.key = "java-version"; javaEnv.value="11";
			step2.envVariables.add(distEnv);step2.envVariables.add(javaEnv);
			t.steps.add(step2);

			var step3 = new Target!Step;
			step3.name = "Test with Maven";
			step3.run = "mvn test";
			t.steps.add(step3);
		}

		if(t.name == "deploy"){
        	var step1 = new Target!Step;
        	step1.name = "Login to Docker Hub";
        	step1.uses = "docker/login-action@v2";
        	var userName = new Target!EnvVariable;
            var password = new Target!EnvVariable;
            userName.key = "username";
            userName.value = "${{ secrets.DOCKERHUB_USERNAME }}";
            password.key = "password";
            password.value = "${{ secrets.DOCKERHUB_TOKEN }}";
            step1.envVariables.add(userName);
            step1.envVariables.add(password);
        	t.steps.add(step1);

        	var step2 = new Target!Step;
            step2.name = "Build images and Push to Docker Hub";
            step2.run = "| \n"+
            "dir=\"./\"\n"
            +"for ser in $dir/*; do\n"+
            "   if [ -d \"$ser\" ] && [ -e \"$ser/Dockerfile\" ]; then\n"+
            "       ser_name=$(basename $ser)\n"+
            "       ser_name=${ser_name,,}\n"+
            "       docker build -t $ser_name:latest $ser\n"+
            "       docker tag $ser_name:latest ${{ secrets.DOCKERHUB_USERNAME }}/$ser_name:latest\n"+
            "       docker push ${{ secrets.DOCKERHUB_USERNAME }}/$ser_name:latest\n"+
            "   fi\n"+
            "done";

            t.steps.add(step2);
        }
	}

rule Input2Pipeline
	transform s: Source!Input
	to t: Target!MainFile{
		t.name = s.pipelineName;
		for(job in s.jobs){
			var j = job.equivalent();
			t.jobs.add(j);
		}
		var on = new Target!On;
		t.on = on;
		for (event in s.events){
		    var e = new Target!Event;
		    e.name = event.name;
		    for(branch in event.branchs){
		        var b = new Target!Branch;
		        b.name = branch.name;
			    e.branchs.add(b);
		    }
		    t.on.events.add(e);
		}
	}